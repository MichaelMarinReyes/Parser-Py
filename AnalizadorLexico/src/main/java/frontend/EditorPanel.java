package frontend;

import backend.Analizador;
import backend.Token;
import java.awt.Color;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author michael
 */
public class EditorPanel extends javax.swing.JPanel {

    private NumeroLinea numerarEditor;
    private NumeroLinea numerarConsola;
    private ReportesPanel reportes = new ReportesPanel();
    public static ArrayList<Token> listaToken = new ArrayList();
    public static ArrayList<Error> errores = new ArrayList<>();

    /**
     * Creates new form PruebaEditor
     */
    public EditorPanel() {
        initComponents();
        mostrarColumnaLabel.setText("Columna: 1");
        numerarEditor = new NumeroLinea(areaEditor);
        scrollEditor.setRowHeaderView(numerarEditor);
        numerarConsola = new NumeroLinea(areaConsola);
        scrollConsola.setRowHeaderView(numerarConsola);
        mostrarColumna();
        configurarEstiloTextoPane();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mostrarColumnaLabel = new javax.swing.JLabel();
        limpiarBoton = new javax.swing.JButton();
        ejecutarBoton = new javax.swing.JButton();
        scrollConsola = new javax.swing.JScrollPane();
        areaConsola = new javax.swing.JEditorPane();
        scrollEditor = new javax.swing.JScrollPane();
        areaEditor = new javax.swing.JTextPane();

        setBackground(new java.awt.Color(255, 153, 102));
        setPreferredSize(new java.awt.Dimension(844, 590));

        mostrarColumnaLabel.setFont(new java.awt.Font("MesloLGL Nerd Font", 0, 13)); // NOI18N
        mostrarColumnaLabel.setForeground(new java.awt.Color(0, 0, 0));
        mostrarColumnaLabel.setText("jLabel1");

        limpiarBoton.setBackground(new java.awt.Color(0, 102, 102));
        limpiarBoton.setFont(new java.awt.Font("MesloLGL Nerd Font", 0, 13)); // NOI18N
        limpiarBoton.setText("Limpiar Editor");
        limpiarBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarBotonActionPerformed(evt);
            }
        });

        ejecutarBoton.setBackground(new java.awt.Color(51, 255, 51));
        ejecutarBoton.setFont(new java.awt.Font("MesloLGL Nerd Font", 1, 13)); // NOI18N
        ejecutarBoton.setForeground(new java.awt.Color(0, 0, 0));
        ejecutarBoton.setText("Ejecutar");
        ejecutarBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ejecutarBotonActionPerformed(evt);
            }
        });

        scrollConsola.setViewportView(areaConsola);

        scrollEditor.setViewportView(areaEditor);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(423, 423, 423)
                        .addComponent(mostrarColumnaLabel)
                        .addGap(101, 101, 101)
                        .addComponent(limpiarBoton)
                        .addGap(60, 60, 60)
                        .addComponent(ejecutarBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(scrollConsola, javax.swing.GroupLayout.DEFAULT_SIZE, 898, Short.MAX_VALUE)
                            .addComponent(scrollEditor))))
                .addGap(31, 31, 31))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(mostrarColumnaLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(limpiarBoton))
                    .addComponent(ejecutarBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addComponent(scrollEditor, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrollConsola, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void ejecutarBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ejecutarBotonActionPerformed
        if (areaEditor.getText().length() == 0) {
            JOptionPane.showMessageDialog(this, "No hay nada para analizar\nEscribe algo en el editor de código");
        } else {
            new Analizador(listaToken).analizar(areaEditor.getText() + "\n");

            for (int i = 0; i < listaToken.size(); i++) {
                areaConsola.setText(areaConsola.getText() + "\n" + listaToken.get(i).toString());
            }
            areaConsola.setText(areaConsola.getText() + "\n\nARCHIVO ANALIZADO\n---------------------------------------------------------------------------------------------------------------------------------");
        }
    }//GEN-LAST:event_ejecutarBotonActionPerformed

    private void limpiarBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarBotonActionPerformed
        areaEditor.setText("");
        areaConsola.setText("");
        listaToken.clear();
    }//GEN-LAST:event_limpiarBotonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane areaConsola;
    private javax.swing.JTextPane areaEditor;
    private javax.swing.JButton ejecutarBoton;
    private javax.swing.JButton limpiarBoton;
    private javax.swing.JLabel mostrarColumnaLabel;
    private javax.swing.JScrollPane scrollConsola;
    private javax.swing.JScrollPane scrollEditor;
    // End of variables declaration//GEN-END:variables

    private void mostrarColumna() {
        areaEditor.addCaretListener(e -> {
            int caretPosition = areaEditor.getCaretPosition();
            int linea = 0;
            try {
                linea = areaEditor.getDocument().getDefaultRootElement().getElementIndex(caretPosition);
            } catch (Exception ex) {
                ex.printStackTrace();
            }

            int columna = 0;
            try {
                int inicioLinea = areaEditor.getDocument().getDefaultRootElement().getElement(linea).getStartOffset();
                columna = caretPosition - inicioLinea;
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            mostrarColumnaLabel.setText("Columna: " + (columna + 1));
        });
    }

    public void setAreaEditor(String textoLeido) {
        areaEditor.setText(textoLeido);
    }

    private void configurarEstiloTextoPane() {
        StyledDocument doc = areaEditor.getStyledDocument();

        doc.addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                SwingUtilities.invokeLater(this::actualizarEstiloTexto);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                SwingUtilities.invokeLater(this::actualizarEstiloTexto);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                // No se usa para documentos de texto plano
            }

            public void actualizarEstiloTexto() {
                StyledDocument doc = areaEditor.getStyledDocument();
                String texto;

                try {
                    texto = doc.getText(0, doc.getLength());
                } catch (BadLocationException e) {
                    e.printStackTrace();
                    return;
                }

                // Limpiar el estilo anterior
                doc.setCharacterAttributes(0, doc.getLength(), new SimpleAttributeSet(), true);

                // Define aquí tu lógica de coloreo
                Pattern patron = Pattern.compile("\\b(palabra_clave1|palabra_clave2|palabra_clave3)\\b");
                Matcher matcher = patron.matcher(texto);

                while (matcher.find()) {
                    doc.setCharacterAttributes(matcher.start(), matcher.end() - matcher.start(), obtenerAtributosPalabraClave(), false);
                }
            }

        });
    }

    private AttributeSet obtenerAtributosPalabraClave() {
        SimpleAttributeSet attr = new SimpleAttributeSet();
        StyleConstants.setForeground(attr, Color.BLUE);
        // Agrega más atributos de estilo según sea necesario
        return attr;
    }

}
