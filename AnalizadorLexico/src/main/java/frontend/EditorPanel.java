package frontend;

import backend.analizadorsintactico.AnalizadorSintactico;
import backend.lexico.identificadores.*;
import backend.lexico.AnalizadorLexico;
import backend.lexico.Token;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;

/**
 *
 * @author michael
 */
public class EditorPanel extends javax.swing.JPanel {

    private NumeroLinea numerarEditor;
    private NumeroLinea numerarConsola;
    public static ArrayList<Token> listaToken = new ArrayList();
    public static ArrayList<Error> errores = new ArrayList<>();

    /**
     * Creates new form PruebaEditor
     */
    public EditorPanel() {
        initComponents();
        mostrarColumnaLabel.setText("Columna: 1");
        numerarEditor = new NumeroLinea(areaEditor);
        scrollEditor.setRowHeaderView(numerarEditor);
        numerarConsola = new NumeroLinea(areaConsola);
        scrollConsola.setRowHeaderView(numerarConsola);
        areaEditor.setBackground(Color.LIGHT_GRAY);
        areaConsola.setBackground(Color.LIGHT_GRAY);
        mostrarColumna();
        this.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                if (evt.getKeyCode() == KeyEvent.VK_F5) {
                    ejecutarAnalisisLexico();
                }
            }
        });
        this.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                if (evt.getKeyCode() == KeyEvent.VK_F4) {
                    limpiarTodo();
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mostrarColumnaLabel = new javax.swing.JLabel();
        limpiarBoton = new javax.swing.JButton();
        ejecutarBoton = new javax.swing.JButton();
        scrollConsola = new javax.swing.JScrollPane();
        areaConsola = new javax.swing.JEditorPane();
        scrollEditor = new javax.swing.JScrollPane();
        areaEditor = new javax.swing.JTextPane();

        setBackground(new java.awt.Color(255, 255, 0));
        setPreferredSize(new java.awt.Dimension(844, 590));
        setLayout(new java.awt.GridBagLayout());

        mostrarColumnaLabel.setFont(new java.awt.Font("MesloLGL Nerd Font", 0, 13)); // NOI18N
        mostrarColumnaLabel.setForeground(new java.awt.Color(0, 0, 0));
        mostrarColumnaLabel.setText("jLabel1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 423, 0, 0);
        add(mostrarColumnaLabel, gridBagConstraints);

        limpiarBoton.setBackground(new java.awt.Color(0, 153, 255));
        limpiarBoton.setFont(new java.awt.Font("MesloLGL Nerd Font", 0, 13)); // NOI18N
        limpiarBoton.setForeground(new java.awt.Color(255, 255, 255));
        limpiarBoton.setText("Limpiar Editor");
        limpiarBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarBotonActionPerformed(evt);
            }
        });
        limpiarBoton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                limpiarBotonKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 101, 0, 0);
        add(limpiarBoton, gridBagConstraints);

        ejecutarBoton.setBackground(new java.awt.Color(51, 255, 51));
        ejecutarBoton.setFont(new java.awt.Font("MesloLGL Nerd Font", 1, 13)); // NOI18N
        ejecutarBoton.setForeground(new java.awt.Color(0, 0, 0));
        ejecutarBoton.setText("Ejecutar");
        ejecutarBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ejecutarBotonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.ipadx = 29;
        gridBagConstraints.ipady = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 60, 0, 0);
        add(ejecutarBoton, gridBagConstraints);

        scrollConsola.setViewportView(areaConsola);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 882;
        gridBagConstraints.ipady = 124;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(12, 32, 7, 31);
        add(scrollConsola, gridBagConstraints);

        scrollEditor.setViewportView(areaEditor);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 882;
        gridBagConstraints.ipady = 362;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 32, 0, 31);
        add(scrollEditor, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void ejecutarBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ejecutarBotonActionPerformed
        ejecutarAnalisisLexico();
        //ejecutarAnalisisSintactico();
    }//GEN-LAST:event_ejecutarBotonActionPerformed

    private void limpiarBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarBotonActionPerformed
        areaEditor.setText("");
        areaConsola.setText("");
        listaToken.clear();
    }//GEN-LAST:event_limpiarBotonActionPerformed

    private void limpiarBotonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_limpiarBotonKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F4) {
            limpiarTodo();
        }
    }//GEN-LAST:event_limpiarBotonKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane areaConsola;
    private javax.swing.JTextPane areaEditor;
    private javax.swing.JButton ejecutarBoton;
    private javax.swing.JButton limpiarBoton;
    private javax.swing.JLabel mostrarColumnaLabel;
    private javax.swing.JScrollPane scrollConsola;
    private javax.swing.JScrollPane scrollEditor;
    // End of variables declaration//GEN-END:variables

    public void ejecutarAnalisisLexico() {
        if (listaToken != null) {
            listaToken.clear();
            areaConsola.setText("");
        }
        if (areaEditor.getText().length() == 0) {
            JOptionPane.showMessageDialog(this, "No hay nada para analizar\nEscribe algo en el editor de código");
        } else {
            new AnalizadorLexico(listaToken).analizar(areaEditor.getText() + "\n");
            for (int i = 0; i < listaToken.size(); i++) {
                areaConsola.setText(areaConsola.getText() + "\n" + listaToken.get(i).toString());
            }
            areaConsola.setText(areaConsola.getText() + "\n\nARCHIVO ANALIZADO\n---------------------------------------------------------------------------------------------------------------------------------");
            colorearTokens();
        }
    }

    private void ejecutarAnalisisSintactico() {

        new AnalizadorSintactico(listaToken).analizar();

        areaConsola.setText(areaConsola.getText() + "\n\nANALISIS SINTÁCTICO FINALIZADO\n---------------------------------------------------------------------------------------------------------------------------------");

    }

    public void limpiarTodo() {
        areaEditor.setText("");
        areaConsola.setText("");
        listaToken.clear();
    }

    private void mostrarColumna() {
        areaEditor.addCaretListener(e -> {
            int caretPosition = areaEditor.getCaretPosition();
            int linea = 0;
            try {
                linea = areaEditor.getDocument().getDefaultRootElement().getElementIndex(caretPosition);
            } catch (Exception ex) {
                ex.printStackTrace();
            }

            int columna = 0;
            try {
                int inicioLinea = areaEditor.getDocument().getDefaultRootElement().getElement(linea).getStartOffset();
                columna = caretPosition - inicioLinea;
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            mostrarColumnaLabel.setText("Columna: " + (columna + 1));
        });
    }

    public void setAreaEditor(String textoLeido) {
        areaEditor.setText(textoLeido);
    }

    private void colorearTokens() {
        StyledDocument doc = areaEditor.getStyledDocument();
        Style defaultStyle = areaEditor.getStyle(StyleContext.DEFAULT_STYLE);

        for (Token token : listaToken) {
            int inicio = (token.getColumna() - token.getLexema().length()) < 1 ? 1 : token.getColumna() - token.getLexema().length();
            int fin = inicio + token.getLexema().length() - 1;

            Style tokenStyle = areaEditor.addStyle(token.getLexema(), defaultStyle);
            Color color = Color.BLACK;

            if (esAritmetico(token.getToken()) || esComparacion(token.getToken()) || esLogico(token.getToken())) {
                color = Color.CYAN;
            } else if (esPalabraClave(token.getToken())) {
                color = new Color(128, 0, 128);
            } else if (esOtroToken(token.getToken())) {
                if (token.getToken().equals("DECIMAL") || token.getToken().equals("ENTERO") || token.getToken().equals("ID")) {
                    color = Color.YELLOW;
                } else if (token.getToken().equals("COMENTARIO")) {
                    color = Color.GRAY;
                } else {
                    color = Color.GREEN;
                }
            } else if (esTipoToken(token.getToken())) {
                if (token.getToken().equals("ERROR_LEXICO")) {
                    color = Color.RED;
                } else {
                    color = Color.GREEN;
                }
            }

            StyleConstants.setForeground(tokenStyle, color);
            doc.setCharacterAttributes(inicio, fin - inicio, tokenStyle, false);
        }
    }

    private boolean esAritmetico(String token) {
        for (int i = 0; i < AritmeticosEnum.values().length; i++) {
            if (token.equals(AritmeticosEnum.values()[i].toString())) {
                return true;
            }
        }
        return false;
    }

    private boolean esComparacion(String token) {
        for (int i = 0; i < ComparacionEnum.values().length; i++) {
            if (token.equals(ComparacionEnum.values()[i].toString())) {
                return true;
            }
        }
        return false;
    }

    private boolean esLogico(String token) {
        for (int i = 0; i < LogicoEnum.values().length; i++) {
            if (token.equals(LogicoEnum.values()[i].toString())) {
                return true;
            }
        }
        return false;
    }

    private boolean esPalabraClave(String token) {
        for (int i = 0; i < PalabraClaveEnum.values().length; i++) {
            if (token.equals(PalabraClaveEnum.values()[i].toString())) {
                return true;
            }
        }
        return false;
    }

    private boolean esTipoToken(String token) {
        for (int i = 0; i < TipoToken.values().length; i++) {
            if (token.equals(TipoToken.values()[i].toString())) {
                return true;
            }
        }
        return false;
    }

    private boolean esOtroToken(String token) {
        for (int i = 0; i < OtroEnum.values().length; i++) {
            if (token.equals(OtroEnum.values()[i].toString())) {
                return true;
            }
        }
        return false;
    }

}
